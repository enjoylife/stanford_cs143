/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

  /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expressions expr_list;
nonterminal Expression expr;
nonterminal Expressions multiple_expr;
nonterminal let let_expr;
nonterminal Cases case_list;

/* Precedence declarations go here. */

/* Referred to http://web.stanford.edu/class/cs143/materials/cool-manual.pdf for associative properties */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	/* End error with semicolon to continue parsing */
    | error SEMI
	;

/* All the following have been taken from the Cool Manual http://web.stanford.edu/class/cs143/materials/cool-manual.pdf */

feature_list
    ::= feature_list:fl feature:f SEMI
        {: RESULT = fl.appendElement(f); :}
    |   {: RESULT = new Features(curr_lineno()); :}
    ;

/* Feature: elements of a class */
feature
    /* Method declaration in a class */
    ::= OBJECTID:ob LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:ex RBRACE
        {: RESULT = new method(curr_lineno(), ob, fl, t, ex); :}
    /* Variable declaration */
    | OBJECTID:ob COLON TYPEID:t
        {: RESULT = new attr(curr_lineno(), ob, t, new no_expr(curr_lineno())); :}
    /* Variable declaration with initialization */
    | OBJECTID:ob COLON TYPEID:t ASSIGN expr:ex
        {: RESULT = new attr(curr_lineno(), ob, t, ex); :}
    | error
    ;

/* formal: Arguments within a method declaration */
formal_list
    ::= formal:f
        {: RESULT = new Formals(curr_lineno()).appendElement(f); :}
    | formal_list:fl COMMA formal:f
        {: RESULT = fl.appendElement(f); :}
    |   {: RESULT = new Formals(curr_lineno()); :}
    ;

formal
    /* param declaration within a method declaration */
    ::= OBJECTID:ob COLON TYPEID:t
        {: RESULT = new formalc(curr_lineno(), ob, t); :}
    ;

expr_list
    ::= expr:e
        {: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
    | expr_list:el COMMA expr:e
        {: RESULT = el.appendElement(e); :}
    |   {: RESULT = new Expressions(curr_lineno()); :}
    ;

expr
    /* Assignment */
    ::= OBJECTID:id ASSIGN expr:ex
        {: RESULT = new assign(curr_lineno(), id, ex); :}

    /* Dispatch */
    | expr:ex DOT OBJECTID:id LPAREN expr_list:el RPAREN
        {: RESULT = new dispatch(curr_lineno(), ex, id, el); :}
    /* Shorthand for calling method on self*/
    | OBJECTID:id LPAREN expr_list:el RPAREN
        {: RESULT = new dispatch(curr_lineno(),
        new object(curr_lineno(), AbstractTable.idtable.addString("self")),
        id, el); :}
    /* Specific class dispatching */
    | expr:ex AT TYPEID:t DOT OBJECTID:id LPAREN expr_list:el RPAREN
        {: RESULT = new static_dispatch(curr_lineno(), ex, t, id, el); :}

    /* Conditionals */
    | IF expr:i THEN expr:t ELSE expr:e FI
        {: RESULT = new cond(curr_lineno(), i, t, e); :}

    /* Loops - While */
    | WHILE expr:e1 LOOP expr:e2 POOL
        {: RESULT = new loop(curr_lineno(), e1, e2); :}

    /* Blocks */
    | LBRACE multiple_expr:mule RBRACE
        {: RESULT = new block(curr_lineno(), mule); :}

    /* Let */
    | LET let_expr:l {: RESULT = l; :}

    /* Case */
    | CASE expr:ex OF case_list:cl ESAC
        {: RESULT = new typcase(curr_lineno(), ex, cl); :}

    /* New */
    | NEW TYPEID:t
        {: RESULT = new new_(curr_lineno(), t); :}

    /* IsVoid */
    | ISVOID expr:ex
        {: RESULT = new isvoid(curr_lineno(), ex); :}

    /* Arithmetic and Comparison Operations */
    /* Plus */
    | expr:e1 PLUS expr:e2
        {: RESULT = new plus(curr_lineno(), e1, e2); :}
    /* Minus */
    | expr:e1 MINUS expr:e2
        {: RESULT = new sub(curr_lineno(), e1, e2); :}
    /* Multiplication */
    | expr:e1 MULT expr:e2
        {: RESULT = new mul(curr_lineno(), e1, e2); :}
    /* Division */
    | expr:e1 DIV expr:e2
        {: RESULT = new divide(curr_lineno(), e1, e2); :}
    /* Negative expr */
    | NEG expr:e {: RESULT = new neg(curr_lineno(), e); :}
    /* Less than */
    | expr:ex1 LT expr:ex2
        {: RESULT = new lt(curr_lineno(), ex1, ex2); :}
    /* Less than equal to */
    | expr:ex1 LE expr:ex2
        {: RESULT = new leq(curr_lineno(), ex1, ex2); :}
    /* Equal to */
    | expr:ex1 EQ expr:ex2
        {: RESULT = new eq(curr_lineno(), ex1, ex2); :}
    /* Not condition */
    | NOT expr:ex1
        {: RESULT = new comp(curr_lineno(), ex1); :}

    /* (expr) */
    | LPAREN expr:e RPAREN
        {: RESULT = e; :}
    /* ID */
    | OBJECTID:id
        {: RESULT = new object(curr_lineno(), id); :}
    /* Integer */
    | INT_CONST:i
        {: RESULT = new int_const(curr_lineno(), i); :}
    /* String */
    | STR_CONST:s
        {: RESULT = new string_const(curr_lineno(), s); :}
    /* true or false */
    | BOOL_CONST:b
        {: RESULT = new bool_const(curr_lineno(), b); :}
    ;


multiple_expr
    ::= expr:ex SEMI
        {: RESULT = new Expressions(curr_lineno()).appendElement(ex); :}
    | multiple_expr:mule expr:ex SEMI
        {: RESULT = mule.appendElement(ex); :}
    /* Error ending in semi colon */
    | multiple_expr error SEMI
    | error SEMI
    ;

/* Let Statement */
let_expr
    /* Multiple let expressions with assignment  */
    ::= OBJECTID:id COLON TYPEID:t ASSIGN expr:ex COMMA let_expr:l
        {: RESULT = new let(curr_lineno(), id, t, ex, l); :}
    /* Multiple let expressions without assignment */
    | OBJECTID:id COLON TYPEID:t COMMA let_expr:l
        {: RESULT = new let(curr_lineno(), id, t, new no_expr(curr_lineno()), l); :}
    /* Single let expression within assignment */
    | OBJECTID:o COLON TYPEID:t ASSIGN expr:e IN expr:l
        {: RESULT = new let(curr_lineno(), o, t, e, l); :}
    /* Single let expression without assignment */
    | OBJECTID:o COLON TYPEID:t IN expr:l
        {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), l); :}
    | error COMMA let_expr
    | error IN expr
    ;

/* List of cases */
case_list
    /* All but first branches of case statement */
    ::= case_list:cl OBJECTID:id COLON TYPEID:t DARROW expr:ex SEMI
        {: RESULT = cl.appendElement(new branch(curr_lineno(), id, t, ex)); :}
    /* First case statement branch*/
    | OBJECTID:id COLON TYPEID:t DARROW expr:ex SEMI
        {: RESULT = new Cases(curr_lineno()).appendElement(new branch(curr_lineno(), id, t, ex)); :}
    ;
